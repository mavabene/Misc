# -*- coding: utf-8 -*-
"""Intermediate Resolution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yvnkICIXpV9yG_59hexrffCqS_cX4ZHj
"""

import keras
keras.__version__

import os, shutil
original_dir= #place here direction to directory with images

# The directory where we will
# store our smaller dataset
base_dir = #create a folder named "conv" in the directory
os.mkdir(base_dir)

# Directories for our training,
# validation and test splits
train_dir = os.path.join(base_dir, 'train')
os.mkdir(train_dir)
validation_dir = os.path.join(base_dir, 'validation')
os.mkdir(validation_dir)
test_dir = os.path.join(base_dir, 'test')
os.mkdir(test_dir)

#Create:
# A directory with our training pictures of cut marks on defleshed bones
train_nm_dir = os.path.join(train_dir, 'NM')
os.mkdir(train_nm_dir)

# Directory with our training pictures of cut marks on fleshed bones
train_wm_dir = os.path.join(train_dir, 'WM')
os.mkdir(train_wm_dir)

# Directory with our validation pictures of cut marks on defleshed bones
validation_nm_dir = os.path.join(validation_dir, 'NM')
os.mkdir(validation_nm_dir)

# Directory with our validation pictures of cut marks on fleshed bones
validation_wm_dir = os.path.join(validation_dir, 'WM')
os.mkdir(validation_wm_dir)

# Directory with our validation pictures of cut marks on defleshed bones
test_nm_dir = os.path.join(test_dir, 'NM')
os.mkdir(test_nm_dir)

# Directory with our validation pictures of cut marks on fleshed bones
test_wm_dir = os.path.join(test_dir, 'WM')
os.mkdir(test_wm_dir)

# Copy first CM images to train_nm_dir
fnames = ['NM.{}.bmp'.format(i) for i in range(70)]
for fname in fnames:
    src = os.path.join(original_dir, fname)
    dst = os.path.join(train_nm_dir, fname)
    shutil.copyfile(src, dst)

# Copy next CM images to validation_nm_dir
fnames = ['NM.{}.bmp'.format(i) for i in range(70, 85)]
for fname in fnames:
    src = os.path.join(original_dir, fname)
    dst = os.path.join(validation_nm_dir, fname)
    shutil.copyfile(src, dst)
    
# Copy next CM images to test_nm_dir
fnames = ['NM.{}.bmp'.format(i) for i in range(85, 100)]
for fname in fnames:
    src = os.path.join(original_dir, fname)
    dst = os.path.join(test_nm_dir, fname)
    shutil.copyfile(src, dst)
    
# Copy first CM images to train_wm_dir
fnames = ['WM.{}.bmp'.format(i) for i in range(91)]
for fname in fnames:
    src = os.path.join(original_dir, fname)
    dst = os.path.join(train_wm_dir, fname)
    shutil.copyfile(src, dst)
    
# Copy next CM images to validation_wm_dir
fnames = ['WM.{}.bmp'.format(i) for i in range(91, 110)]
for fname in fnames:
    src = os.path.join(original_dir, fname)
    dst = os.path.join(validation_wm_dir, fname)
    shutil.copyfile(src, dst)
    
# Copy next CM images to test_wm_dir
fnames = ['WM.{}.bmp'.format(i) for i in range(110, 130)]
for fname in fnames:
    src = os.path.join(original_dir, fname)
    dst = os.path.join(test_wm_dir, fname)
    shutil.copyfile(src, dst)

from keras import layers
from keras import models

#height, width, channels
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu',
                        input_shape=(80, 400, 3)))#cambiar 1 a 3 si es color
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(512, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

from keras import optimizers

model.compile(loss='binary_crossentropy',
              optimizer=optimizers.RMSprop(lr=1e-4),
              metrics=['acc'])

from keras.preprocessing.image import ImageDataGenerator

# All images will be rescaled by 1./255
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        # This is the target directory
        train_dir,
        # All images will be resized to 40x160
        target_size=(80, 400),
        batch_size=20,
        # Since we use binary_crossentropy loss, we need binary labels
        class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
        validation_dir,
        target_size=(80, 400),
        batch_size=20,
        class_mode='binary')

history = model.fit_generator(
      train_generator,
      steps_per_epoch=100,
      epochs=100,
      validation_data=validation_generator,
      validation_steps=50)

import matplotlib.pyplot as plt

acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

#alternative model with image augmentation

from keras.preprocessing.image import ImageDataGenerator
#Let's train our network using data augmentation and dropout:
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,)

# Note that the validation data should not be augmented!
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        # This is the target directory
        train_dir,
        # All images will be resized to 150x150
        target_size=(80, 400),
        batch_size=32,
        # Since we use binary_crossentropy loss, we need binary labels
        class_mode='binary')#put "categorical" if there's more than 2 categories

validation_generator = test_datagen.flow_from_directory(
        validation_dir,
        target_size=(80, 400),
        batch_size=32,
        class_mode='binary')# use "categorical" if there's more than 2 groups

history = model.fit_generator(
      train_generator,
      steps_per_epoch=30,
      epochs=100,
      validation_data=validation_generator,
      validation_steps=10)